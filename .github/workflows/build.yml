name: Build App

on:
  workflow_dispatch:
  # push:
  #   branches: [ main, master ]
  # pull_request:
  #   branches: [ main, master ]

jobs:
  build-macos:
    name: macOS (arm64)
    runs-on: [self-hosted, macos, arm64]
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      ELECTRON_CACHE: ~/.cache/electron
      ELECTRON_BUILDER_CACHE: ~/.cache/electron-builder
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build macOS App (arm64)
        run: |
          npm run dist -- --mac --arm64 --publish=never

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macOS-arm64
          path: dist/

  build-linux:
    name: Linux (arm64)
    runs-on: ubuntu-22.04-arm
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      ELECTRON_CACHE: ~/.cache/electron
      ELECTRON_BUILDER_CACHE: ~/.cache/electron-builder
    steps:
      - uses: actions/checkout@v4

      - name: Clean electron-builder fpm cache
        run: rm -rf ~/.cache/electron-builder/fpm || true

      - name: Install system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            python3-distutils python3-dev python3-pip build-essential cmake pkg-config \
            liblzma-dev p7zip-full fakeroot rpm dpkg-dev

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install npm deps (force build-from-source)
        run: |
          export npm_config_build_from_source=true
          npm ci

      - name: Rebuild native modules (sÃ»r)
        run: npx electron-rebuild --arch=arm64 || true

      - name: Build Linux App (AppImage, no publish)
        run: npm run dist -- --linux --arm64 --publish=never

      - uses: actions/upload-artifact@v4
        with:
          name: linux-arm64
          path: dist/

  build-windows:
    name: Windows (arm64)
    runs-on: windows-11-arm
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      ELECTRON_CACHE: ~\AppData\Local\electron\Cache
      ELECTRON_BUILDER_CACHE: ~\AppData\Local\electron-builder\Cache
      VCPKG_ROOT: C:\vcpkg
      VCPKG_DEFAULT_TRIPLET: arm64-windows
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Python & CMake & Visual Studio Build Tools (with ARM64 components)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          choco install -y python --version=3.11.8
          refreshenv
          python -m pip install --upgrade pip setuptools wheel
          # Install CMake via choco so cmake.exe is on PATH
          choco install -y cmake --installargs '"ADD_CMAKE_TO_PATH=System"'
          refreshenv
          # Install VS Build Tools with ARM components (explicit)
          choco install -y visualstudio2022buildtools --package-parameters '--add Microsoft.VisualStudio.Component.VC.Tools.ARM64 --add Microsoft.VisualStudio.Component.Windows10SDK.19041 --includeRecommended'
          refreshenv

      - name: Bootstrap vcpkg and install xz (liblzma) for arm64 - pwsh robust
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          if (-not (Test-Path 'C:\vcpkg')) {
            git clone https://github.com/microsoft/vcpkg C:\vcpkg
          } else {
            cd C:\vcpkg
            git fetch --all
            git reset --hard origin/master
          }
          cd C:\vcpkg
          .\bootstrap-vcpkg.bat

          if (-not (Test-Path '.\vcpkg.exe')) { throw "vcpkg.exe missing" }
          .\vcpkg.exe update
          # Show a few ports for debug
          Get-ChildItem C:\vcpkg\ports | Select-Object -First 80 Name | Format-Table -AutoSize

          # Try install; will throw on error and be displayed in logs
          .\vcpkg.exe install xz:arm64-windows

          Write-Host "Installed libs under C:\vcpkg\installed\arm64-windows\lib"
          Get-ChildItem C:\vcpkg\installed\arm64-windows\lib -Recurse | Select-Object Name,Length | Format-Table -AutoSize

          # Export env
          Add-Content -Path $env:GITHUB_ENV -Value "VCPKG_ROOT=C:\vcpkg"
          Add-Content -Path $env:GITHUB_ENV -Value "VCPKG_DEFAULT_TRIPLET=arm64-windows"
          Add-Content -Path $env:GITHUB_ENV -Value "CMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake"
          Add-Content -Path $env:GITHUB_ENV -Value "INCLUDE=C:\vcpkg\installed\arm64-windows\include"
          Add-Content -Path $env:GITHUB_ENV -Value "LIB=C:\vcpkg\installed\arm64-windows\lib"
          Add-Content -Path $env:GITHUB_ENV -Value "PATH=C:\vcpkg\installed\arm64-windows\bin;$env:PATH"

      - name: Force build-from-source and electron/native env (export for npm/node-gyp)
        shell: pwsh
        run: |
          # compute electron target from package.json if available, fallback to 38.2.2
          $pkg = Get-Content package.json | ConvertFrom-Json
          $electronVer = $pkg.devDependencies.electron 2>$null -or $pkg.dependencies.electron 2>$null -or $pkg.engines.electron 2>$null
          if (-not $electronVer) { $electronVer = '38.2.2' }
          # strip ^ ~ if present
          $eltarget = $electronVer -replace '^[\^~]'
          Add-Content -Path $env:GITHUB_ENV -Value "npm_config_build_from_source=true"
          Add-Content -Path $env:GITHUB_ENV -Value "npm_config_runtime=electron"
          Add-Content -Path $env:GITHUB_ENV -Value "npm_config_target=$eltarget"
          Add-Content -Path $env:GITHUB_ENV -Value "npm_config_arch=arm64"
          Add-Content -Path $env:GITHUB_ENV -Value "npm_config_disturl=https://electronjs.org/headers"

      - name: Clean workspace (avoid EBUSY artifacts)
        shell: pwsh
        run: |
          git clean -ffdx || true
          Start-Sleep -Seconds 2

      - name: Install dependencies (build native modules)
        shell: pwsh
        run: |
          npm ci

      - name: Rebuild native modules for Electron (ARM64)
        shell: pwsh
        run: |
          npx electron-rebuild --arch=arm64 --force || true

      - name: Build Windows App (ARM64)
        shell: pwsh
        run: |
          npm run dist -- --win --arm64 --publish=never

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Windows-arm64
          path: dist/
