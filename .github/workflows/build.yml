name: Build App

on:
  workflow_dispatch:
  # push:
  #   branches: [ main, master ]
  # pull_request:
  #   branches: [ main, master ]

jobs:
  build-macos:
    name: macOS (arm64)
    runs-on: [self-hosted, macos, arm64]
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      ELECTRON_CACHE: ~/.cache/electron
      ELECTRON_BUILDER_CACHE: ~/.cache/electron-builder
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build macOS App (arm64)
        run: |
          npm run dist -- --mac --arm64 --publish=never

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macOS-arm64
          path: dist/

  build-linux:
    name: Linux (arm64)
    runs-on: ubuntu-22.04-arm
    env:
      ELECTRON_CACHE: ~/.cache/electron
      ELECTRON_BUILDER_CACHE: ~/.cache/electron-builder
    steps:
      - uses: actions/checkout@v4

      - name: Clean electron-builder fpm cache
        run: rm -rf ~/.cache/electron-builder/fpm || true

      - name: Install system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            python3-distutils python3-dev python3-pip build-essential cmake pkg-config \
            liblzma-dev p7zip-full fakeroot rpm dpkg-dev

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install npm deps (force build-from-source)
        run: |
          export npm_config_build_from_source=true
          npm ci

      - name: Rebuild native modules (sûr)
        run: npx electron-rebuild --arch=arm64 || true

      - name: Build Linux App (AppImage, no publish)
        run: npm run dist -- --linux --arm64 --publish=never

      - uses: actions/upload-artifact@v4
        with:
          name: linux-arm64
          path: dist/

  build-windows:
    name: Windows (arm64)
    runs-on: windows-11-arm
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      ELECTRON_CACHE: ~\AppData\Local\electron\Cache
      ELECTRON_BUILDER_CACHE: ~\AppData\Local\electron-builder\Cache
      VCPKG_ROOT: C:\vcpkg
      VCPKG_DEFAULT_TRIPLET: arm64-windows
      npm_config_arch: arm64
      npm_config_target_arch: arm64
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Python 3.11 and Visual Studio Build Tools
        shell: pwsh
        run: |
          choco install -y python --version=3.11.8
          refreshenv
          python -m pip install --upgrade pip setuptools wheel cmake
          choco install -y visualstudio2022buildtools --package-parameters "--includeRecommended --includeOptional"
          refreshenv

      - name: Bootstrap vcpkg and install xz (liblzma) for arm64
        shell: pwsh
        run: |
          set -e

          Write-Host "=== Ensure C:\vcpkg is present and up to date ==="
          if (-Not (Test-Path 'C:\vcpkg')) {
            Write-Host "Cloning vcpkg (full clone, no --depth)..."
            git clone https://github.com/microsoft/vcpkg C:\vcpkg
          } else {
            Write-Host "vcpkg exists - fetching latest and resetting to origin/master..."
            cd C:\vcpkg
            git fetch --all
            git reset --hard origin/master
          }

          Write-Host "Contents of C:\vcpkg (top-level):"
          Get-ChildItem C:\vcpkg -Force | Select-Object Name, Mode, LastWriteTime

          Write-Host "Bootstrapping vcpkg (creates vcpkg.exe)..."
          cd C:\vcpkg
          # bootstrap-vcpkg.bat will create vcpkg.exe
          .\bootstrap-vcpkg.bat

          if (-Not (Test-Path '.\vcpkg.exe')) {
            Write-Error "bootstrap-vcpkg.bat did not produce vcpkg.exe. Aborting."
            exit 1
          }

          Write-Host "vcpkg.exe exists. Showing version:"
          .\vcpkg.exe version

          Write-Host "Listing ports folder (first-level):"
          Get-ChildItem C:\vcpkg\ports | Select-Object Name | Out-String -Width 4096 | Write-Host

          Write-Host "Searching for xz port via vcpkg search..."
          .\vcpkg.exe search xz || true

          # check explicitly for port folder
          if (Test-Path 'C:\vcpkg\ports\xz') {
            Write-Host "Port 'xz' found in C:\\vcpkg\\ports\\xz"
          } else {
            Write-Warning "Port 'xz' NOT found in C:\\vcpkg\\ports\\xz"
            Write-Host "Listing the ports that seem related to 'lzma' or 'xz':"
            Get-ChildItem C:\vcpkg\ports | Where-Object { $_.Name -match 'xz|lzma|liblzma' } | Select-Object Name | Out-String -Width 4096 | Write-Host
            Write-Error "vcpkg port 'xz' is not present. The clone might be incomplete or the repo state is unexpected."
            # do not exit yet — try to update vcpkg registry and retry install (best-effort)
          }

          Write-Host "Updating vcpkg registry and trying to install xz:arm64-windows..."
          .\vcpkg.exe update
          $installExit = 0
          try {
            .\vcpkg.exe install xz:arm64-windows
          } catch {
            Write-Host "vcpkg install failed. Capturing error output and listing installed/ports..."
            $installExit = 1
            Get-ChildItem C:\vcpkg\ports | Select-Object Name | Out-String -Width 4096 | Write-Host
            .\vcpkg.exe list | Out-String -Width 4096 | Write-Host
          }

          if ($installExit -ne 0) {
            Write-Error "vcpkg install xz:arm64-windows failed. See logs above. As fallback, trying 'xz' via vcpkg manifest or alternative package names..."
            # try alternate names (best-effort)
            try {
              .\vcpkg.exe search liblzma | Out-String -Width 4096 | Write-Host
              .\vcpkg.exe search xzutils | Out-String -Width 4096 | Write-Host
            } catch { }

            Write-Error "If 'xz' is missing from ports, consider cloning vcpkg without depth, or use a self-hosted Windows ARM machine. Aborting."
            exit 1
          }

          Write-Host "vcpkg installed xz:arm64-windows successfully."
          Write-Host "Setting environment variables (vcpkg toolchain file, include/lib paths) for subsequent build steps..."
          Add-Content -Path $env:GITHUB_ENV -Value "VCPKG_ROOT=C:\vcpkg"
          Add-Content -Path $env:GITHUB_ENV -Value "VCPKG_DEFAULT_TRIPLET=arm64-windows"
          Add-Content -Path $env:GITHUB_ENV -Value "CMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake"
          Add-Content -Path $env:GITHUB_ENV -Value "INCLUDE=C:\vcpkg\installed\arm64-windows\include"
          Add-Content -Path $env:GITHUB_ENV -Value "LIB=C:\vcpkg\installed\arm64-windows\lib"

          Write-Host "Done bootstrap & install attempt."
      
      - name: Clean workspace (avoid EBUSY artifacts)
        shell: pwsh
        run: |
          git clean -ffdx

      - name: Force build-from-source env vars
        shell: pwsh
        run: |
          echo "npm_config_build_from_source=true" >> $env:GITHUB_ENV
          echo "npm_config_target=38.2.2" >> $env:GITHUB_ENV   # set to your electron version if needed
          echo "npm_config_arch=arm64" >> $env:GITHUB_ENV

      - name: Install dependencies (build native modules)
        shell: pwsh
        run: |
          npm ci

      - name: Rebuild native modules for Electron (ARM64)
        shell: pwsh
        run: |
          npx electron-rebuild --version $(node -e "console.log(require('./package.json').engines && require('./package.json').engines.electron || require('./package.json').devDependencies && require('./package.json').devDependencies.electron || '')") --arch=arm64 || npx electron-rebuild --arch=arm64

      - name: Build Windows App (ARM64)
        shell: pwsh
        run: |
          npm run dist -- --win --arm64 --publish=never

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Windows-arm64
          path: dist/
