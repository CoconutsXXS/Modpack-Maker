name: Multi-Platform Build

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  build-matrix:
    name: Build (${{ matrix.platform }}) ${{ matrix.os }} / ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: win
            arch: x64
          - os: macos-latest
            platform: mac
            arch: universal
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Cache the npm cache per-OS + lockfile to avoid cross-OS cache mixing
      - name: Cache ~/.npm (per OS + lockfile)
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Setup Node.js (with setup-node npm cache)
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: Clean node_modules & install dependencies
        run: |
          # cross-platform removal of node_modules
          npx rimraf node_modules
          # reproducible install
          npm ci --no-audit --prefer-offline
        env:
          CI: true

      # Windows-only: ensure Windows rollup native binary is installed if npm missed it
      - name: Ensure rollup native binary on Windows (workaround)
        if: runner.os == 'Windows'
        run: |
          echo "Checking for @rollup/rollup-win32-x64-msvc..."
          node -e "try { require('@rollup/rollup-win32-x64-msvc'); console.log('present'); process.exit(0) } catch(e) { console.error('missing'); process.exit(1) }" || npm install --no-save @rollup/rollup-win32-x64-msvc
        shell: pwsh

      - name: Apply patches / postinstall (if you use patch-package)
        # only runs if you have a postinstall in package.json (safe to include)
        run: |
          if [ -f package.json ]; then
            # npm ci will already run postinstall; this is idempotent if you need to re-run
            echo "postinstall will have been run by npm ci; nothing to do"
          fi
        shell: bash

      - name: Ensure native deps for Electron
        run: |
          npx electron-builder install-app-deps
        env:
          npm_config_build_from_source: "false"

      - name: Setup Rosetta (mac only â€” allows building x64 parts on macOS arm runners)
        if: runner.os == 'macOS'
        run: |
          sudo /usr/sbin/softwareupdate --install-rosetta --agree-to-license || true

      - name: Build UI (Vite)
        run: npm run build:ui

      - name: Package Electron (Linux/Windows host arch)
        if: ${{ matrix.arch != 'universal' }}
        run: npx electron-builder --${{ matrix.platform }} --${{ matrix.arch }} --publish never
        env:
          npm_config_build_from_source: "false"

      - name: Package Electron (mac universal)
        if: ${{ matrix.arch == 'universal' && matrix.platform == 'mac' }}
        run: npx electron-builder --mac --x64 --arm64 --publish never
        env:
          npm_config_build_from_source: "false"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.arch }}-build
          path: release/

  publish:
    name: Publish release artifacts
    needs: build-matrix
    if: github.event_name == 'release' && github.event.action == 'published'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Publish artifacts to Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx electron-builder --publish always
