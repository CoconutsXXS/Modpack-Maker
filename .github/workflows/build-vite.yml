name: Multi-Platform Build

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  build-matrix:
    name: Build ${{ matrix.platform }} (${{ matrix.os }}, ${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # reliable builds on hosted runners:
          - os: ubuntu-latest
            platform: linux
            arch: x64
          - os: windows-latest
            platform: win
            arch: x64
          # macOS: produce a "universal" build from the mac runner
          - os: macos-latest
            platform: mac
            arch: universal

      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache node modules (per OS + lockfile)
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies (clean node_modules if present)
        run: |
          # Use rimraf (cross-platform) to remove node_modules if present
          npx rimraf node_modules
          npm ci
        env:
          CI: true

      - name: Build UI (Vite)
        run: npm run build:ui

      # Build for non-universal platforms (linux / win)
      - name: Package Electron (non-universal)
        if: ${{ matrix.arch != 'universal' }}
        run: |
          npx electron-builder --${{ matrix.platform }} --${{ matrix.arch }} --publish never
        env:
          # improve native module compatibility
          npm_config_build_from_source: "false"

      # Special mac universal build step
      - name: Package Electron (mac universal)
        if: ${{ matrix.arch == 'universal' && matrix.platform == 'mac' }}
        run: |
          # Build both architectures; electron-builder will emit universal DMG/App
          npx electron-builder --mac --x64 --arm64 --publish never
        env:
          npm_config_build_from_source: "false"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.arch }}-build
          path: release/
          # optionally: retention-days, if you want shorter lifetime

  publish:
    name: Publish release artifacts
    needs: build-matrix
    if: github.event_name == 'release' && github.event.action == 'published'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Publish artifacts to GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # Let electron-builder attach artifacts to the existing GitHub Release
        run: npx electron-builder --publish always