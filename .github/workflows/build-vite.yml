name: Multi-Platform Build

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  build-matrix:
    name: Build (${{ matrix.platform }}) ${{ matrix.os }} / ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
          - os: windows-latest
            platform: win
            arch: x64
          - os: macos-latest
            platform: mac
            arch: universal
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js (and enable setup-node npm cache)
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies (clean node_modules if present)
        run: |
          # Remove node_modules for a clean install (cross-platform)
          npx rimraf node_modules
          npm ci
        env:
          CI: true

      - name: Apply electron native deps / install-app-deps
        run: |
          # Ensures native modules are prepared for Electron
          npx electron-builder install-app-deps
        env:
          npm_config_build_from_source: "false"

      - name: Setup Rosetta 2 (required to build x64 on Apple Silicon mac runners)
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          sudo /usr/sbin/softwareupdate --install-rosetta --agree-to-license || true

      - name: Build front-end (Vite)
        run: npm run build:ui

      - name: Package Electron (Linux / Windows host-arch)
        if: ${{ matrix.arch != 'universal' }}
        run: |
          # platform is one of: linux, win
          npx electron-builder --${{ matrix.platform }} --${{ matrix.arch }} --publish never
        env:
          npm_config_build_from_source: "false"

      - name: Package Electron (mac universal on mac runner)
        if: ${{ matrix.arch == 'universal' && matrix.platform == 'mac' }}
        run: |
          # Build both architectures â€” electron-builder will create universal outputs
          npx electron-builder --mac --x64 --arm64 --publish never
        env:
          npm_config_build_from_source: "false"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.arch }}-build
          path: release/

  publish:
    name: Publish release artifacts
    needs: build-matrix
    if: github.event_name == 'release' && github.event.action == 'published'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Publish artifacts to Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx electron-builder --publish always
